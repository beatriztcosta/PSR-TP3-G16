#!/usr/bin/env python3
#!/usr/bin/env python3
#!/usr/bin/env python3
import copy
import math

import rospy
import tf2_ros
from geometry_msgs.msg import Twist, PoseStamped
import tf2_geometry_msgs  # **Do not use geometry_msgs. Use this instead for PoseStamped
from sensor_msgs.msg import LaserScan, Image, CameraInfo
from nav_msgs.msg import Odometry
from gazebo_msgs.srv import DeleteModel, DeleteModelRequest

from matplotlib.pyplot import axis

import rospy
import tf2_ros
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from tf2_geometry_msgs import PoseStamped # **Do not use geometry_msgs. Use this instead for PoseStamped
from sensor_msgs.msg import LaserScan, Image, CameraInfo
from gazebo_msgs.srv import DeleteModel, DeleteModelRequest
import cv2
import numpy as np
from cv_bridge import CvBridge
from rospy import ServiceProxy

import numpy as np
import os
import rospy
from geometry_msgs.msg import Twist
import sys, select, os

from driver import READY, Driver


if os.name == 'nt':
  import msvcrt
else:
  import tty, termios



COLORS = ['red', 'green', 'blue']
PLAYERS = [[color+str(j) for j in range(1,4)] for color in COLORS] 
RGB = [(255,0,0), (0,255,0), (0,0,255)]




WAFFLE_MAX_LIN_VEL = 5.26
WAFFLE_MAX_ANG_VEL = 1.82
LIN_VEL_STEP_SIZE = 0.1
ANG_VEL_STEP_SIZE = 0.3


WAFFLE_WHEEL_DIST = 0.287
config = {
    "NUM_SENSORS": 20,
    "RESOLUTION": 10,
    "RANGE_MIN": -150*math.pi/180,
    "RANGE_MAX": 150*math.pi/180
}

# sizes
INPUT_SIZE = config["RESOLUTION"] + config["NUM_SENSORS"] + 2 + 2
HISTORY_SIZE = 4
WEIGHT_SIZE = (1, INPUT_SIZE+1)


bridge = CvBridge()

class Normalizer():

    def __init__(self):
        self.n = 0
        self.min = np.ones(INPUT_SIZE)*1000
        self.max = np.ones(INPUT_SIZE)*-1000

    def observe(self, x):
        self.n += 1.
        self.min = np.minimum(self.min, x)
        self.max = np.maximum(self.max, x)

    def normalize(self, inputs):
        return inputs/np.abs(self.max.clip(min=1e-2))

    def saveFromFile(self, file):
        np.savez(file, {
            "min": self.min,
            "max": self.max,
            "n": self.n
        })

    def loadFromFile(self, file):
        dc = np.load(file)
        self.n = dc["n"] 
        self.min = dc["min"] 
        self.max = dc["max"] 

def shuffle_along_axis(a, axis):
    idx = np.random.rand(*a.shape).argsort(axis=axis)
    return np.take_along_axis(a,idx,axis=axis)


def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLimitVelocity(vel, value):
    
    return constrain(vel, -value, value)


def getKey():
    if os.name == 'nt':
      if sys.version_info[0] >= 3:
        return msvcrt.getch().decode()
      else:
        return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def vels(target_linear_vel, target_angular_vel):
    return "Currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)


class ManualDriver(Driver):
    def __init__(self, name, team, normalizer, input_params):
        super().__init__(name, team, normalizer, input_params)

    def driveStraight(self, minumum_speed=0.1, maximum_speed=1.5):
        goal_copy = copy.deepcopy(self.goal)  # make sure we don't change the stamp field of the goal
        goal_copy.header.stamp = rospy.Time.now()

        goal_in_base_link = self.tf_buffer.transform(goal_copy, self.name + '/base_footprint', rospy.Duration(1))

        x = goal_in_base_link.pose.position.x
        y = goal_in_base_link.pose.position.y

        NUM_SENSORS = self.input_params["NUM_SENSORS"]

        self.angle = math.atan2(y,x)
        distance_to_goal = math.sqrt(x**2 + y**2)
        if self.sensors[NUM_SENSORS//2]>7:
            self.speed = -0.1
            self.angle /= max(self.sensors[NUM_SENSORS//2]*1.5,5)
        elif abs(self.angle)<math.pi/2:    
            self.speed = max(minumum_speed, 0.5 * distance_to_goal)   # limit minimum speed
            self.speed = min(maximum_speed, self.speed)   # limit maximum speed
            # reduce speed relative to the required angle
            self.speed *= 1/(1+abs(self.angle)/(math.pi/4) ) 
        else:
            self.speed = 0  # rotate in place

        if distance_to_goal < 0.1:
            self.goal_active = False


    def sendCommandCallback(self): 
        self.driveStraight()

        twist = Twist()
        twist.linear.x = self.speed
        twist.angular.z = self.angle
        self.publisher_command.publish(twist)






msg = """
Manual Control Mode for Player
------------------------------

Moving around:

        w
   a    s    d
   
     [space]

------------------------------
KEYS:
    w/s : increase/decrease linear velocity (~ 0.26)
    a/d : increase/decrease angular velocity (~ 1.82)
    space key: force stop
------------------------------

Recording mode:

    i   o   p

------------------------------
KEYS:
    i - start recording
    p - stop recording and discart changes
    o - stop recording and save changes
------------------------------

CTRL-C to quit program
"""

e = """
ERROR: Communications Failed
"""

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output


if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('manual_mode')

    turtlebot3_model = rospy.get_param("model", "waffle_pi")

    status = 0
    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0
    recording = False

    p = 'red1'
    myteamidx = max([idx for idx, n in enumerate(COLORS) if p.startswith(n)] or [0])

    driver = ManualDriver(p, myteamidx, None, config)
    lastKey = None 
    keys_pressed = set()

    perm_history_input = []
    perm_history_output = []
    
    history_input = []
    history_output = []
    queue = np.zeros((HISTORY_SIZE * INPUT_SIZE,))

    pub = rospy.Publisher(f"/{driver.name}/cmd_vel", Twist, queue_size=10)
    try:
        print(msg)
        while(1):
            
            key_pressed = getKey()
            keys_pressed.add(key_pressed)
            if driver.goal_active:
                driver.sendCommandCallback()
                continue
            if (key_pressed == '\x03'):
                sys.exit(1)
                break
            if driver.ready == READY:
                actions = np.array([int(key in keys_pressed) for key in 'wsad '])
                queue = np.concatenate( [ queue[INPUT_SIZE:] , driver.inputs ] )
                for key in 'wsad iop':
                    target_linear_vel *= 0.9
                    if key not in keys_pressed:
                        continue
                    if key == 'w':
                        target_linear_vel = 1#checkLimitVelocity(target_linear_vel + LIN_VEL_STEP_SIZE, WAFFLE_MAX_LIN_VEL)
                        print(vels(target_linear_vel,target_angular_vel))
                    elif key == 's':
                        target_linear_vel = -1#checkLimitVelocity(target_linear_vel - LIN_VEL_STEP_SIZE, WAFFLE_MAX_LIN_VEL)
                        print(vels(target_linear_vel,target_angular_vel))
                    elif key == 'a':
                        target_angular_vel = checkLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE, WAFFLE_MAX_ANG_VEL)
                        print(vels(target_linear_vel,target_angular_vel))
                    elif key == 'd':
                        target_angular_vel = checkLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE, WAFFLE_MAX_ANG_VEL)
                        print(vels(target_linear_vel,target_angular_vel))
                    elif key == ' ':
                        target_linear_vel   = 0.0
                        control_linear_vel  = 0.0
                        target_angular_vel  = 0.0
                        control_angular_vel = 0.0
                        print(vels(target_linear_vel, target_angular_vel))
                    elif key == 'i': 
                        # tecla para começar a gravar - insert
                        rospy.logwarn("Start Recording")
                        recording = True

                    elif key == 'o':     
                        # tecla para parar e salvar gravação - end
                        rospy.logwarn("Stop and Save Recording")
                        recording = False
                        perm_history_input.extend(history_input)
                        perm_history_output.extend(history_output)
                        np.save("inputs", np.array(perm_history_input), allow_pickle=True)
                        np.save("outputs", np.array(perm_history_output), allow_pickle=True)

                        history_input = []
                        history_output = []
                    elif key == 'p': 
                        # tecla para parar e descartar gravaçar - delete
                        rospy.logwarn("Stop and Discart Recording")
                        recording = False
                        history_input = []
                        history_output = []                        
                    if (key == '\x03'):
                        break
                
                if recording:
                    history_input.append(queue.astype(np.float32))
                    history_output.append(actions.astype(np.uint8))

                driver.ready = 0b0
                keys_pressed = set()                      
        
            twist = Twist()
            control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE/2.0))
            twist.linear.x = control_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0

            control_angular_vel *= 0.95
            control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = control_angular_vel

            pub.publish(twist)

    except:
        print(sys.exc_info())

    finally:
        twist = Twist()
        twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
        twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
        pub.publish(twist)

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)